name: ðŸ›  Build An Issue

on:
  workflow_call:
    inputs:
      issue_no:
        required: true
        type: string
    outputs:
      issue_no:
        value: ${{ jobs.generate.outputs.issue_no }}
      issue_id:
        value: ${{ jobs.generate.outputs.issue_id }}
      issue_title:
        value: ${{ jobs.generate.outputs.issue_title }}

permissions: write-all

concurrency:
    group: ${{ github.repository }}-build-issue
    cancel-in-progress: true

defaults:
    run:
      shell: bash

jobs:

  grab-events:
    uses: ./.github/workflows/grab-events.yaml
    secrets: inherit

  generate:
    outputs: 
      issue_no: ${{ steps.output.outputs.issue_no }}
      issue_id: ${{ steps.output.outputs.issue_id }}
      issue_title: ${{ steps.output.outputs.issue_title }}
    runs-on: ubuntu-latest
    needs: grab-events
    steps:

      -   name: Checkout
          uses: actions/checkout@v4

      -   name: Grab Issue Comments
          id: issue
          run: |
              if [[ "${{ inputs.issue_no }}" != "regenerate" ]]; then
              RUIssue="$(gh api graphql -F owner=$OWNER -F name=$REPO -f query='
                  query($name: String!, $owner: String!) {
                      repository(name: $name, owner: $owner) {
                          issues(first: 1, states: OPEN, labels: "next-roundup") {
                              nodes {
                                  title
                                  number
                                  comments(first:100) {
                                      nodes {
                                          body
                                      }
                                  }
                              }
                          }
                      }
                  }
              ')"
              else
              RUIssue="$(gh api graphql -f query='
                query getRepoByTitle {
                  search(query: """repo:STLGameDev/STLGameDevRoundUp in:title #${{ inputs.issue_no }}""", type:ISSUE, first: 1 ) {
                    nodes {
                      ... on Issue {
                        title
                        number
                      }
                    }
                  }
                }
              ')"
              fi

              issue_id=$(echo $RUIssue | jq -r '.data.repository.issues.nodes[0].number')
              echo 'issue_id'=$issue_id >> $GITHUB_OUTPUT
              issue_title=$(echo $RUIssue | jq -r '.data.repository.issues.nodes[0].title')
              ru_no="${issue_title##*#}"
              file_no=$ru_no;
              content_no=$ru_no;
              is_test="false";
              if [[ "${{ inputs.issue_no }}" == "test" ]]; then
                file_no="-test"
                content_no="test";
                is_test="true";
              fi
              save_to="data/issue${file_no}.json"
              mkdir -p data

              echo '{
                  "nodes": 
              ' > $save_to
              
              RUIComments=$(echo $RUIssue | jq '[.data.repository.issues.nodes[].comments.nodes[] | select(.body | startswith("{"))]')
              RUIComments=$(echo $RUIComments | sed 's/\\r\\n/\\r\\n\\r\\n/g')
              
              echo $RUIComments >> $save_to
              echo '
              }' >> $save_to
              echo 'ISSUE_NO'=$ru_no >> $GITHUB_ENV
              echo 'issue_no'=$ru_no >> $GITHUB_OUTPUT
              md_file="content/issue-${content_no}.md"
              cat << EOF > $md_file
              ---
              title: "Issue #$ru_no"
              date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
              draft: false
              is_test: $is_test
              no: $ru_no
              ---
              EOF
          env: 
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              OWNER: ${{ github.repository_owner }}
              REPO: ${{ github.event.repository.name }}

      -   name: Inject Events into JSON
          id: inject
          env:
              ISSUE_NO: ${{ env.ISSUE_NO }}
              EVENTS_JSON: ${{ needs.grab-events.outputs.events }}
          run: |
              tmpfile=$(mktemp)
              if [[ "${{ inputs.issue_no }}" == "test" ]]; then
                jq --argjson events "$EVENTS_JSON" '.events = $events' "data/issue-test.json" > "$tmpfile" && mv "$tmpfile" "data/issue-test.json"
              else
                jq --argjson events "$EVENTS_JSON" '.events = $events' "data/issue${ISSUE_NO}.json" > "$tmpfile" && mv "$tmpfile" "data/issue${ISSUE_NO}.json"
              fi
      
      -   name: Commit change
          run: |
              git config --global user.name "GitHub Actions"
              git config --global user.email "no-reply@github.com"
              if [[ "${{ inputs.issue_no }}" == "regenerate" ]]; then
                git tag re-generated-issue-${ISSUE_NO}
                git add data/issue${ISSUE_NO}.json
                git commit -m "Regenerated issue ${ISSUE_NO}"
              elif [[ "${{ inputs.issue_no }}" == "test" ]]; then
                git tag generated-test-issue-${ISSUE_NO}
                git add content/issue-test.md data/issue-test.json
                git commit -m "Update issue ${ISSUE_NO}"
              else
                git tag generated-issue-${ISSUE_NO}
                git add content/issue-${ISSUE_NO}.md data/issue${ISSUE_NO}.json
                git commit -m "Update issue ${ISSUE_NO}"
              fi
              git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
              git push --follow-tags 

      -   name: Output
          id: output
          run: |
              echo "issue_no=${{ env.ISSUE_NO }}" >> $GITHUB_OUTPUT
              echo "issue_id=${{ steps.issue.outputs.issue_id }}" >> $GITHUB_OUTPUT
              echo "issue_title=${{ steps.issue.outputs.issue_title }}" >> $GITHUB_OUTPUT
