name: ðŸ“§ RoundUp Newsletter Email
run-name: ðŸ“§ RoundUp Newsletter Email by @${{ github.actor }}

on:
    workflow_call:
      inputs:
        issue_no:
          required: true
          type: string
        base_url:
          required: true
          type: string

permissions: write-all

defaults:
    run:
        shell: bash

jobs:
  mailchimp:
    runs-on: ubuntu-latest
    steps:
      - name: Create Mailchimp Campaign
        run: |
          id=$(curl -X POST \
          "https://${{ secrets.MAILCHIMP_DC }}.api.mailchimp.com/3.0/campaigns" \
          --user "admin@stlgame.dev:${{ secrets.MAILCHIMP_API_KEY }}" \
          --data-raw '{
            "type": "regular",
            "recipients": {
                "list_id": "c120d5d29b"
            },
            "settings": {
                "subject_line": "St Louis Game Developer RoundUp Issue â„– ${{ inputs.issue_no }}",
                "preview_text": "Monthly Game Development News from STLGameDev!",
                "title": "RoundUp â„– ${{ inputs.issue_no }}",
                "from_name": "STLGameDev",
                "reply_to": "news@stlgame.dev",
                "use_conversation": false,
                "to_name": "*|FNAME|*",
                "auto_footer": true,
                "inline_css": true
            },
            "content_type": "template"
          }' | jq -r '.id')
          echo "campaign_id=$id" >> $GITHUB_ENV
        
      -   name: get issue content
          id: issue-content
          run: |
            set -euo pipefail
            url="${{ inputs.base_url }}/issue-${{ inputs.issue_no }}/email.html"
            ru_content="$(curl -fsSL "$url")"
            if [ $? -ne 0 ] || [ -z "$ru_content" ]; then
              echo "Error: Failed to fetch HTML or content is empty!" >&2
              exit 1
            fi
            # Remove all newlines and carriage returns
            ru_content="$(echo "$ru_content" | tr -d '\n' | tr -d '\r')"
            # Log first 100 characters for debug
            echo "HTML preview: ${ru_content:0:100}" >&2
            # Encode HTML as compact JSON and store in env
            email_json="$(jq -c -n --arg html "$ru_content" '{html: $html}')"
            if ! echo "$email_json" | jq empty; then
              echo "Error: Invalid JSON generated!" >&2
              exit 1
            fi
            echo "email_json=$email_json" >> $GITHUB_ENV

      -   name: update campaign
          run: |
            set -euo pipefail
            id="${{ env.campaign_id }}"
            curl --location --request PUT "https://${{ secrets.MAILCHIMP_DC }}.api.mailchimp.com/3.0/campaigns/$id/content" \
              --header 'Content-Type: application/json' \
              --user "admin@stlgame.dev:${{ secrets.MAILCHIMP_API_KEY }}" \
              --data-raw "${{ env.email_json }}"

      -   name: test email
          run: |
            id=${{ env.campaign_id }}

            curl -X POST \
                "https://${{ secrets.MAILCHIMP_DC }}.api.mailchimp.com/3.0/campaigns/$id/actions/send" \
                --user "admin@stlgame.dev:${{ secrets.MAILCHIMP_API_KEY }}"